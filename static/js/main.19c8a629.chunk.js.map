{"version":3,"sources":["components/navbar.jsx","components/installedDevices.jsx","components/address.jsx","components/manufacturerfX.jsx","components/device.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","Fragment","AppBar","position","className","href","InstalledDevices","props","state","installedDeviceList","fetchDevices","fetchInstalledDevices","bind","fetch","then","response","json","console","log","setState","this","id","map","device","index","key","description","Component","Address","changeHandler","e","target","name","value","addAddress","preventDefault","zip","street","formdata","FormData","append","method","body","text","result","catch","error","updateAddress","deleteAddress","requestOptions","redirect","url","addressList","classes","makeStyles","theme","root","margin","spacing","width","title","fetchAddress","fechTasks","str","zp","addresses","Typography","variant","color","onSubmit","type","onChange","Button","Divider","dark","address","Manufacturer","React","useState","setError","isLoaded","setIsLoaded","items","setItems","receiveMessage","Promise","resolve","setTimeout","localStorage","setItem","getItem","sessionStorage","a","msg","requestMessage","useEffect","res","message","item","DevicesAvailable","deviceList","fetchAddresses","Container","maxWidth","App","selectedComponent","handleSelect","event","onClick","light","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.19c8a629.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar } from \"@material-ui/core\";\r\n//One stateless function-based component\r\nconst NavBar = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\">\r\n        <nav className=\"navbar navbar-dark bg-dark\">\r\n          <a className=\"navbar-brand\" href=\"_blank\">\r\n            Home <span className=\"badge badge-pill badge-secondary\"></span>\r\n          </a>\r\n        </nav>\r\n      </AppBar>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n\r\n// Stateless class based component\r\n// class NavBar extends Component {\r\n//   render() {\r\n//     return (\r\n//       <nav className=\"navbar navbar-dark bg-dark\">\r\n//         <a className=\"navbar-brand\" href=\"_blank\">\r\n//           Home{\" \"}\r\n//           <span className=\"badge badge-pill badge-secondary\">\r\n//             {this.props.totalCounters}\r\n//           </span>\r\n//         </a>\r\n//         {/* <a className=\"navbar-brand\" href=\"_blank\">\r\n//           Addresses{\" \"}\r\n//           <span className=\"badge badge-pill badge-secondary\">\r\n//             {this.props.totalCounters}\r\n//           </span>\r\n//         </a>\r\n//         <a className=\"navbar-brand\" href=\"_blank\">\r\n//           Manufacturer{\" \"}\r\n//           <span className=\"badge badge-pill badge-secondary\">\r\n//             {this.props.totalCounters}\r\n//           </span>\r\n//         </a> */}\r\n//       </nav>\r\n//     );\r\n//   }\r\n//}\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"../App.css\";\r\n\r\nclass InstalledDevices extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      installedDeviceList: [],\r\n    };\r\n    this.fetchDevices = this.fetchInstalledDevices.bind(this);\r\n  }\r\n\r\n  fetchInstalledDevices() {\r\n    fetch(\"http://3.25.104.164:8000/devices/\")\r\n      .then((response) => response.json())\r\n      .then(console.log(\"fetching InstalledDevices\"))\r\n      .then((response) =>\r\n        this.setState({\r\n          installedDeviceList: response,\r\n        })\r\n      );\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    this.fetchDevices();\r\n  }\r\n\r\n  render() {\r\n    var installedDeviceList = this.state.installedDeviceList;\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <div id=\"task-container\">\r\n            <div id=\"list-wrapper\" className=\"mater\">\r\n              <h1> Installed Devices</h1>\r\n              {installedDeviceList.map(function (device, index) {\r\n                return (\r\n                  <div key={index} className=\"task-wrapper flex-wrapper\">\r\n                    <span>{device.description}</span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InstalledDevices;\r\n","import React, { Component } from \"react\";\r\nimport { Button, Divider, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NavBar from \"./navbar\";\r\nimport \"../App.css\";\r\n\r\nclass Address extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      addressList: [],\r\n      zip: \"\",\r\n      street: \"\",\r\n      title: \"\",\r\n      body: \"\",\r\n    };\r\n    this.fetchAddress = this.fechTasks.bind(this);\r\n  }\r\n\r\n  fechTasks() {\r\n    fetch(\"http://3.25.104.164:8000/address/\")\r\n      .then((response) => response.json())\r\n      .then(console.log(\"fetching\"))\r\n      .then((response) =>\r\n        this.setState({\r\n          addressList: response,\r\n        })\r\n      );\r\n  }\r\n\r\n  createAddress(str, zp) {\r\n    var formdata = new FormData();\r\n\r\n    formdata.append(\"street\", str);\r\n    formdata.append(\"zip\", zp);\r\n\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      body: formdata,\r\n    };\r\n\r\n    fetch(\"http://3.25.104.164:8000/address/\", requestOptions)\r\n      .then((response) => response.text())\r\n      .then((result) => console.log(result))\r\n      .catch((error) => console.log(\"error\", error));\r\n  }\r\n\r\n  changeHandler = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  //Create of CRUD\r\n  addAddress = (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log(this.state.zip);\r\n    console.log(this.state.street);\r\n\r\n    var formdata = new FormData();\r\n\r\n    formdata.append(\"street\", this.state.street);\r\n    formdata.append(\"zip\", this.state.zip);\r\n\r\n    var requestOptions = {\r\n      method: \"POST\",\r\n      body: formdata,\r\n    };\r\n\r\n    fetch(\"http://3.25.104.164:8000/address/\", requestOptions)\r\n      .then((response) => response.text())\r\n      .then((result) => console.log(result))\r\n      .catch((error) => console.log(\"error\", error));\r\n  };\r\n\r\n  //Update of CRUD : This always updates the first record\r\n  // Not correct way of doing it\r\n  updateAddress = (e) => {\r\n    e.preventDefault();\r\n    console.log(this.state.zip);\r\n    console.log(this.state.street);\r\n\r\n    var formdata = new FormData();\r\n\r\n    formdata.append(\"street\", this.state.street);\r\n    formdata.append(\"zip\", this.state.zip);\r\n\r\n    var requestOptions = {\r\n      method: \"PUT\",\r\n      body: formdata,\r\n    };\r\n\r\n    fetch(\"http://3.25.104.164:8000/address/1/\", requestOptions)\r\n      .then((response) => response.text())\r\n      .then((result) => console.log(result))\r\n      .catch((error) => console.log(\"error\", error));\r\n  };\r\n\r\n  //Delete of CRUD : This performs the delete operation at the top of the stack\r\n  //Not correct way of deleting, becausem delete operaion should be within the UI elementwhich needs to be deleted\r\n  // But i do not know at thi spoint how to do that\r\n  deleteAddress = (e) => {\r\n    var raw = \"\";\r\n    let topStackid = this.state.addressList[0].id;\r\n\r\n    var requestOptions = {\r\n      method: \"DELETE\",\r\n      body: raw,\r\n      redirect: \"follow\",\r\n    };\r\n    let url = \"http://3.25.104.164:8000/address/\" + topStackid + \"/\";\r\n    console.log(url);\r\n    fetch(url, requestOptions)\r\n      .then((response) => response.text())\r\n      .then((result) => console.log(result))\r\n      .catch((error) => console.log(\"error\", error));\r\n  };\r\n\r\n  //# Read on CRUD\r\n  UNSAFE_componentWillMount() {\r\n    this.fetchAddress();\r\n  }\r\n\r\n  classes = makeStyles((theme) => ({\r\n    root: {\r\n      \"& > *\": {\r\n        margin: theme.spacing(1),\r\n        width: \"25ch\",\r\n      },\r\n    },\r\n  }));\r\n\r\n  render() {\r\n    var addresses = this.state.addressList;\r\n    const { street, zip } = this.state;\r\n    return (\r\n      <div>\r\n        <NavBar />\r\n        <div className=\"container\">\r\n          <div id=\"task-container\">\r\n            <div id=\"list-wrapper\">\r\n              <div>\r\n                <Typography variant=\"h5\" color=\"inherit\">\r\n                  Add Addresses\r\n                </Typography>\r\n                <div>\r\n                  <div>\r\n                    <form onSubmit={this.addAddress}>\r\n                      <div>\r\n                        <label>Street</label>\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"street\"\r\n                          value={street}\r\n                          onChange={this.changeHandler}\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <label>Zip</label>\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"zip\"\r\n                          value={zip}\r\n                          onChange={this.changeHandler}\r\n                        />\r\n                      </div>\r\n                      <Button variant=\"outlined\" color=\"primary\" type=\"submit\">\r\n                        Submit\r\n                      </Button>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n                <Typography variant=\"h5\" color=\"inherit\">\r\n                  Update Addresses\r\n                </Typography>\r\n                <div>\r\n                  <div>\r\n                    <form onSubmit={this.updateAddress}>\r\n                      <div>\r\n                        <label>Street</label>\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"street\"\r\n                          value={street}\r\n                          onChange={this.changeHandler}\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <label>Zip</label>\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"zip\"\r\n                          value={zip}\r\n                          onChange={this.changeHandler}\r\n                        />\r\n                      </div>\r\n                      <Button variant=\"outlined\" color=\"primary\" type=\"submit\">\r\n                        Submit\r\n                      </Button>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n                <Divider dark />\r\n                <Typography variant=\"h5\" color=\"inherit\">\r\n                  Delete Addresses\r\n                </Typography>\r\n                <div>\r\n                  <div>\r\n                    <form onSubmit={this.deleteAddress}>\r\n                      <Button variant=\"outlined\" color=\"primary\" type=\"submit\">\r\n                        Delete One Address\r\n                      </Button>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <br />\r\n\r\n              <Divider dark />\r\n              <Typography variant=\"h5\" color=\"inherit\">\r\n                Existing Addresses\r\n              </Typography>\r\n\r\n              {addresses.map(function (address, index) {\r\n                //this.store();\r\n                return (\r\n                  <div key={index} className=\"task-wrapper flex-wrapper\">\r\n                    <span>{address.street}</span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            {/* <Button onClick={this.createAddress} name=\"Manufacturer\">\r\n              Add Address\r\n            </Button> */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Address;\r\n","import React from \"react\";\r\n\r\nimport NavBar from \"./navbar\";\r\n\r\nimport \"../App.css\";\r\n\r\n//Hooks & Promises\r\nfunction Manufacturer() {\r\n  const [error, setError] = React.useState(null);\r\n  const [isLoaded, setIsLoaded] = React.useState(false);\r\n  const [items, setItems] = React.useState([]);\r\n\r\n  function receiveMessage() {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(\"The message from past, using async await\");\r\n        //setter in local storage\r\n        localStorage.setItem(\"key1\", 1);\r\n        //getter in local storage\r\n        console.log(localStorage.getItem(\"key1\"));\r\n        //setter in session storage\r\n        sessionStorage.setItem(\"key2\", 2);\r\n        //getter in session storage\r\n        console.log(sessionStorage.getItem(\"key2\"));\r\n      }, 2500);\r\n    });\r\n  }\r\n  //This is a sample for assignemnt requirement, a message is sent\r\n  // and the message is receivevd after 2000 ms\r\n  async function requestMessage() {\r\n    const msg = await receiveMessage();\r\n    console.log(\"Message:\", msg);\r\n  }\r\n\r\n  requestMessage();\r\n\r\n  React.useEffect(() => {\r\n    fetch(\"http://3.25.104.164:8000/manufacturer/\")\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setItems(result);\r\n        },\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      );\r\n  }, []);\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <NavBar />\r\n        <div className=\"container\">\r\n          <div id=\"task-container\">\r\n            <div id=\"list-wrapper\" className=\"mater\">\r\n              <h1> Manufacturer</h1>\r\n              {items.map(function (item, index) {\r\n                return (\r\n                  <div key={index} className=\"task-wrapper flex-wrapper\">\r\n                    <span>{item.name}</span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            {/* <button onClick={this.createAddress} name=\"Manufacturer\">\r\n              Add Address\r\n            </button> */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Manufacturer;\r\n","import React, { Component } from \"react\";\r\nimport NavBar from \"./navbar\";\r\nimport \"../App.css\";\r\nimport Container from \"@material-ui/core/Container\";\r\nclass DevicesAvailable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      deviceList: [],\r\n    };\r\n    this.fetchAddresses = this.fechTasks.bind(this);\r\n  }\r\n\r\n  fechTasks() {\r\n    fetch(\"http://3.25.104.164:8000/devices/\")\r\n      .then((response) => response.json())\r\n      .then(console.log(\"fetching\"))\r\n      .then((response) =>\r\n        this.setState({\r\n          deviceList: response,\r\n        })\r\n      );\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    this.fetchAddresses();\r\n  }\r\n\r\n  render() {\r\n    var addresses = this.state.deviceList;\r\n    return (\r\n      <div>\r\n        <NavBar />\r\n        <Container maxWidth=\"sm\">\r\n          <div className=\"container\">\r\n            <div id=\"task-container\">\r\n              <div id=\"list-wrapper\" className=\"mater\">\r\n                <h1> Devices On Catalogue</h1>\r\n                {addresses.map(function (address, index) {\r\n                  return (\r\n                    <div key={index} className=\"task-wrapper flex-wrapper\">\r\n                      <span>{address.description}</span>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DevicesAvailable;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport NavBar from \"./components/navbar\";\r\nimport InstalledDevices from \"./components/installedDevices\";\r\nimport Addresses from \"./components/address\";\r\nimport Manufacturer from \"./components/manufacturerfX\";\r\nimport DevicesAvailable from \"./components/device\";\r\nimport { Button, Divider, Paper } from \"@material-ui/core\";\r\n\r\n// One stateful class-based component\r\nclass App extends Component {\r\n  state = { selectedComponent: \"\" };\r\n  constructor() {\r\n    super();\r\n    console.log(\"called Construktr App\");\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"called componentDidMount\");\r\n  }\r\n\r\n  handleSelect = (event) => {\r\n    this.setState({ selectedComponent: event.target.name });\r\n  };\r\n  // App component has two child, Navbar and Devices\r\n  render() {\r\n    if (this.state.selectedComponent === \"Addresses\") {\r\n      return <Addresses />;\r\n    }\r\n    if (this.state.selectedComponent === \"Manufacturer\") {\r\n      return <Manufacturer />;\r\n    }\r\n    if (this.state.selectedComponent === \"DevicesAvailable\") {\r\n      return <DevicesAvailable />;\r\n    }\r\n\r\n    console.log(\"App - render called\");\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar />\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            this.setState({ selectedComponent: \"Addresses\" });\r\n          }}\r\n        >\r\n          Addresseses\r\n        </Button>\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            this.setState({ selectedComponent: \"Manufacturer\" });\r\n          }}\r\n        >\r\n          Manufacturer\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            this.setState({ selectedComponent: \"DevicesAvailable\" });\r\n          }}\r\n        >\r\n          Devices Available\r\n        </Button>\r\n        <Divider light />\r\n        <Paper elevation={1} />\r\n        <main className=\"container\"></main>\r\n        {/* Home Page is the list of installed devices */}\r\n        <InstalledDevices />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n//import App from \"./App\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\n//const element = <h1>Hello World</h1>;\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}